Name, Description, Complexity
":ref:`bn256groth16Verify(ByteVector, ByteVector, ByteVector): Boolean <03_advanced:bn256groth16Verify(ByteVector, ByteVector, ByteVector): Boolean>`", "Range of functions. Check zk-SNARK by groth16 protocol on the bn254 curve", ":math:`800–1650`"
":ref:`createMerkleRoot(List[ByteVector], ByteVector, Int) : ByteVector <03_advanced:createMerkleRoot(List[ByteVector], ByteVector, Int) : ByteVector>`", "Calculates the Merkle root hash for transactions of block", ":math:`30`"
":ref:`ecrecover(messageHash: ByteVector, signature: ByteVector) <03_advanced:ecrecover(messageHash: ByteVector, signature: ByteVector)>`", "Recovers public key from the message hash and the ECDSA digital signature", ":math:`70`"
":ref:`groth16Verify(ByteVector, ByteVector, ByteVector): Boolean <03_advanced:groth16Verify(ByteVector, ByteVector, ByteVector): Boolean>`", "Range of functions. Check zk-SNARK by groth16 protocol on the bls12-381 curve", ":math:`1200–2700`"
":ref:`rsaVerify(digestAlgorithmType, ByteVector, ByteVector, ByteVector): Boolean <03_advanced:rsaVerify(digestAlgorithmType, ByteVector, ByteVector, ByteVector): Boolean>`", "Range of functions. Check that the RSA digital signature is valid, i.e. it was created by the owner of the public key", ":math:`500–1000`"
":ref:`sigVerify(ByteVector, ByteVector, ByteVector): Boolean <03_advanced:sigVerify(ByteVector, ByteVector, ByteVector): Boolean>`", "Range of functions. Check that the Curve25519 digital signature is valid, i.e. it was created by the owner of the public key", ":math:`47–200`"