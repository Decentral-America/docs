#, Field, JSON field name, Field type, Field size in bytes, Comment
":math:`1`", "Version flag", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Indicates the transaction version is :math:`2` or higher. Value must be :math:`0`."
":math:`2`", ":ref:`Transaction type ID <02_decentralchain/03_transaction:Transaction Types>`", "type", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`14`."
":math:`3`", "Transaction version", "version", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`1`."
":math:`4`", "Transaction type ID", "type", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "This field duplicates field :math:`2`."
":math:`5`", "Transaction version", "version", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "This field duplicates field :math:`3`."
":math:`6`", "Public key of the transaction sender", "senderPublicKey", "Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]", ":math:`32`", " "
":math:`7`", "Token ID", "assetId", "Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]", ":math:`32`", " "
":math:`8`", "Minimal sponsored asset fee", "minSponsoredAssetFee", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", "Amount of sponsored asset that is equivalent to :math:`0.001` DecentralCoins (:math:`100,000` Decentralites)."
":math:`9`", ":ref:`Transaction fee <02_decentralchain/03_transaction:Transaction Fees>`", "fee", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", " "
":math:`10`", "Transaction timestamp", "timestamp", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", " "
":math:`11`", "Transaction proofs", "proofs", "See :ref:`transaction proofs binary format <02_decentralchain/10_binary-format:Transaction Proofs Binary Format>`", "S", "If the array is empty, then :math:`S = 3`. If the array is not empty, then :math:`S = 3 + 2 × N + 64 × N`, where :math:`N` is the number of proofs in the array. The maximum number of proofs in the array is :math:`8`. The size of each proof is :math:`64` bytes."