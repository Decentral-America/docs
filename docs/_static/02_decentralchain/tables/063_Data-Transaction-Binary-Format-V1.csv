#, Field, JSON field name, Field type, Field size in bytes, Comment
":math:`1`", "Version flag", " ", ":ref:`Byte <02_decentralchain:Blockchain Data Types>`", ":math:`1`", "Indicates the transaction version is :math:`2` or higher. Value must be :math:`0`."
":math:`2`", ":ref:`Transaction type ID <02_decentralchain:Transaction Types>`", "type", ":ref:`Byte <02_decentralchain:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`12`."
":math:`3`", "Transaction version", "version", ":ref:`Byte <02_decentralchain:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`1`."
":math:`4`", "Public key of the transaction sender", "senderPublicKey", "Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`]", ":math:`32`", " "
":math:`5`", "Length of the data array", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", " "
":math:`6.1`", "Key 1 length", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", " "
":math:`6.2`", "Key 1", "key", ":ref:`String <02_decentralchain:Blockchain Data Types>`", "Up to :math:`400`", "Maximum of :math:`100` characters."
":math:`6.3`", "Value 1 type", "type", ":ref:`Byte <02_decentralchain:Blockchain Data Types>`", ":math:`1`", "Options are: 0 - :ref:`Long <02_decentralchain:Blockchain Data Types>`. 1 - :ref:`Boolean <02_decentralchain:Blockchain Data Types>`. 2 - Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`]. 3 - :ref:`String <02_decentralchain:Blockchain Data Types>`."
":math:`6.4`", "Value 1 length", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", "This field is present only if the value is of type of array of bytes or a string. If the value is of type of integer or a boolean, this field should not be included in the data structure."
":math:`6.5`", "Value 1", "value", "T", "S", "T is one of the following: 1) :ref:`Long <02_decentralchain:Blockchain Data Types>`, :math:`S = 8`. 2) :ref:`Boolean <02_decentralchain:Blockchain Data Types>`, :math:`S = 1`. 3) Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`], :math:`S ⩽ 32,767`. 4) :ref:`String <02_decentralchain:Blockchain Data Types>`, :math:`S ⩽ 32,767`."
":math:`6.6`", "Key 2 length", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", " "
":math:`6.7`", "Key 2", "key", ":ref:`String <02_decentralchain:Blockchain Data Types>`", "Up to :math:`400`", "Maximum of :math:`100` characters."
":math:`6.8`", "Value 2 type", "type", ":ref:`Byte <02_decentralchain:Blockchain Data Types>`", ":math:`1`", "Options are: 0 - :ref:`Long <02_decentralchain:Blockchain Data Types>`. 1 - :ref:`Boolean <02_decentralchain:Blockchain Data Types>`. 2 - Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`]. 3 - :ref:`String <02_decentralchain:Blockchain Data Types>`."
":math:`6.9`", "Value 2 length", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", "This field is present only if the value is of type of array of bytes or a string. If the value is of type of integer or a boolean, this field should not be included in the data structure."
":math:`6.10`", "Value 2", "value", "T", "S", "T is one of the following: 1) :ref:`Long <02_decentralchain:Blockchain Data Types>`, :math:`S = 8`. 2) :ref:`Boolean <02_decentralchain:Blockchain Data Types>`, :math:`S = 1`. 3) Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`], :math:`S ⩽ 32,767`. 4) :ref:`String <02_decentralchain:Blockchain Data Types>`, :math:`S ⩽ 32,767`."
"...", "...", "...", "...", "...", "..."
":math:`6.[5 × N - 4]`", "N-th key length", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", " "
":math:`6.[5 × N - 3]`", "N-th key", "key", ":ref:`String <02_decentralchain:Blockchain Data Types>`", "Up to :math:`400`", "Maximum of :math:`100` characters."
":math:`6.[5 × N - 2]`", "N-th value type", "type", ":ref:`Byte <02_decentralchain:Blockchain Data Types>`", ":math:`1`", "Options are: 0 - :ref:`Long <02_decentralchain:Blockchain Data Types>`. 1 - :ref:`Boolean <02_decentralchain:Blockchain Data Types>`. 2 - Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`]. 3 - :ref:`String <02_decentralchain:Blockchain Data Types>`."
":math:`6.[5 × N - 1]`", "N-th value length", " ", ":ref:`Short <02_decentralchain:Blockchain Data Types>`", ":math:`2`", "This field is present only if the value is of type of array of bytes or a string. If the value is of type of integer or a boolean, this field should not be included in the data structure."
":math:`6.[5 × N]`", "N-th value", "value", "T", "S", "T is one of the following: 1) :ref:`Long <02_decentralchain:Blockchain Data Types>`, :math:`S = 8`. 2) :ref:`Boolean <02_decentralchain:Blockchain Data Types>`, :math:`S = 1`. 3) Array[:ref:`Byte <02_decentralchain:Blockchain Data Types>`], :math:`S ⩽ 32,767`. 4) :ref:`String <02_decentralchain:Blockchain Data Types>`, :math:`S ⩽ 32,767`."
":math:`7`", "Transaction timestamp", "timestamp", ":ref:`Long <02_decentralchain:Blockchain Data Types>`", ":math:`8`", " "
":math:`8`", ":ref:`Transaction fee <02_decentralchain:Transaction Fees>`", "fee", ":ref:`Long <02_decentralchain:Blockchain Data Types>`", ":math:`8`", " "
":math:`9`", "Transaction proofs", "proofs", "See :ref:`transaction proofs binary format <02_decentralchain:Transaction Proofs Binary Format>`", "S", "If the array is empty, then :math:`S = 3`. If the array is not empty, then :math:`S = 3 + 2 × N + 64 × N`, where :math:`N` is the number of proofs in the array. The maximum number of proofs in the array is :math:`8`. The size of each proof is 64 bytes."