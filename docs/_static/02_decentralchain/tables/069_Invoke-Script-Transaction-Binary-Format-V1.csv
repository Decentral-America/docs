#, Field, JSON field name, Field type, Field size in bytes, Comment
":math:`1`", "Version flag", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Indicates the transaction version is :math:`2` or higher. Value must be :math:`0`."
":math:`2`", ":ref:`Transaction type ID <02_decentralchain/03_transaction:Transaction Types>`", "type", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`16`."
":math:`3`", "Transaction version", "version", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`1`."
":math:`4`", ":ref:`Chain ID <02_decentralchain/08_mainnet-testnet-stagenet:Chain ID>`", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`87` — for Mainnet. :math:`84` — for Testnet. :math:`83` — for Stagenet."
":math:`5`", "Public key of the transaction sender", "senderPublicKey", "Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]", ":math:`32`", " "
":math:`6`", "Address or alias", "dApp", "See Address Binary Format, Alias Binary Format", "S", "If the first byte of the field is :math:`1`, then it is followed by address. S in this case equals :math:`26`. If the first byte of the field is :math:`2`, then it is followed by alias. In this case :math:`8 <= S <= 34`."
":math:`7.1`", "Function presence flag", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`0` — the default function of the dApp is invoked. :math:`1` — function from the current transaction should be invoked in the dApp."
":math:`7.2`", "Function call ID", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Constant. The value must be :math:`9`."
":math:`7.3`", "Function type ID", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "Constant. The value must be :math:`1`."
":math:`7.4`", "Function name length", " ", ":ref:`Int <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`4`", " "
":math:`7.5`", "Function name", "function", ":ref:`String <02_decentralchain/09_protocol:Blockchain Data Types>`", "Up to :math:`255`", " "
":math:`7.6.1`", "Amount of arguments of the function", " ", ":ref:`Int <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`4`", " "
":math:`7.6.2`", "ID of argument 1 type", "type", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`0` — argument type is long. :math:`1` — argument type is an array of bytes. :math:`2` — argument type is a string. :math:`6` — argument type is logical True. :math:`7` — argument type is logical False. :math:`11` – argument type is list."
":math:`7.6.3`", "Argument 1", "value", "Options are: 1) :ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`. 2) Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]. 3) :ref:`String <02_decentralchain/09_protocol:Blockchain Data Types>`. 4) Logical True. 5) Logical False. 6) List.", "S", ":math:`S = 8`, if argument type is long. If the argument type is an array of bytes, string, or list, the field size is limited only by the total transaction size. If the type is list, then 1) its length must not exceed :math:`1000` elements. 2) amount of its elements represents first :math:`4` bytes of the current field. 3) each list element is serialized similarly to the function argument: the element type ID takes first place followed by the element's value. :math:`S = 0`, if argument type is logical True or False."
":math:`7.6.4`", "ID of argument 2 type", "type", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`0` — argument type is long. :math:`1` — argument type is an array of bytes. :math:`2` — argument type is a string. :math:`6` — argument type is logical True. :math:`7` — argument type is logical False. :math:`11` – argument type is list."
":math:`7.6.5`", "Argument 2", "value", "Options are: 1) :ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`. 2) Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]. 3) :ref:`String <02_decentralchain/09_protocol:Blockchain Data Types>`. 4) Logical True. 5) Logical False. 6) List.", "S", ":math:`S = 8`, if argument type is long. If the argument type is an array of bytes, string, or list, the field size is limited only by the total transaction size. If the type is list, then 1) its length must not exceed :math:`1000` elements. 2) amount of its elements represents first :math:`4` bytes of the current field. 3) each list element is serialized similarly to the function argument: the element type ID takes first place followed by the element's value. :math:`S = 0`, if argument type is logical True or False."
"...", "...", "...", "...", "...", "..."
":math:`7.6.[2 × N]`", "ID of argument N type", "type", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", "0 — argument type is long. 1 — argument type is an array of bytes. 2 — argument type is a string. 6 — argument type is logical True. 7 — argument type is logical False. 11 – argument type is list."
":math:`7.6.[2 × N + 1]`", "Argument N", "value", "Options are: 1) :ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`. 2) Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]. 3) :ref:`String <02_decentralchain/09_protocol:Blockchain Data Types>`. 4) Logical True. 5) Logical False. 6) List.", "S", ":math:`S = 8`, if argument type is long. If the argument type is an array of bytes, string, or list, the field size is limited only by the total transaction size. If the type is list, then 1) its length must not exceed :math:`1000` elements. 2) amount of its elements represents first :math:`4` bytes of the current field. 3) each list element is serialized similarly to the function argument: the element type ID takes first place followed by the element's value. :math:`S = 0`, if argument type is logical True or False."
":math:`8.1`", "Amount of payments", " ", :ref:`Short<02_decentralchain/09_protocol:Blockchain Data Types>`, ":math:`2`", " "
":math:`8.2`", "Payment 1 length", " ", :ref:`Short<02_decentralchain/09_protocol:Blockchain Data Types>`, ":math:`2`", " "
":math:`8.3`", "Amount of token in payment 1", "amount", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", " "
":math:`8.4`", "Flag of payment 1 token", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`0` — :ref:`DecentralCoins <02_decentralchain/02_token(asset):DecentralCoin>`. :math:`1` — other token."
":math:`8.5`", "ID of payment 1 token", " ", "Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]", ":math:`32`", "Field is applicable if the token is not :ref:`DecentralCoins <02_decentralchain/02_token(asset):DecentralCoin>`."
"...", "...", "...", "...", "...", "..."
":math:`8.[4 × N – 2]`", "Payment N length", " ", :ref:`Short<02_decentralchain/09_protocol:Blockchain Data Types>`, ":math:`2`", " "
":math:`8.[4 × N – 1]`", "Amount of token in payment N", "amount", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", " "
":math:`8.[4 × N]`", "Flag of payment N token", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`0` — :ref:`DecentralCoins <02_decentralchain/02_token(asset):DecentralCoin>`. :math:`1` — other token."
":math:`8.[4 × N + 1]`", "ID of payment N token", " ", "Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]", ":math:`32`", "Field is applicable if the token is not :ref:`DecentralCoins <02_decentralchain/02_token(asset):DecentralCoin>`."
":math:`9`", ":ref:`Transaction fee <02_decentralchain/03_transaction:Transaction Fees>`", "fee", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", " "
":math:`10.1`", "Flag of fee token", " ", ":ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`1`", ":math:`0` — :ref:`DecentralCoins <02_decentralchain/02_token(asset):DecentralCoin>`. :math:`1` — other token."
":math:`10.2`", "Fee token ID", "feeAssetId", "Array[:ref:`Byte <02_decentralchain/09_protocol:Blockchain Data Types>`]", "S", ":math:`S = 0`, if token is :ref:`DecentralCoins <02_decentralchain/02_token(asset):DecentralCoin>`. :math:`S = 32`, if it is other token."
":math:`11`", "Transaction timestamp", "timestamp", ":ref:`Long <02_decentralchain/09_protocol:Blockchain Data Types>`", ":math:`8`", " "
":math:`12`", "Transaction proofs", "proofs", "See :ref:`transaction proofs binary format <02_decentralchain/10_binary-format:Transaction Proofs Binary Format>`", "S", "If the array is empty, then :math:`S = 3`. If the array is not empty, then :math:`S = 3 + 2 × N + 64 × N`, where :math:`N` is the number of proofs in the array. The maximum number of proofs in the array is :math:`8`. The size of each proof is :math:`64` bytes."