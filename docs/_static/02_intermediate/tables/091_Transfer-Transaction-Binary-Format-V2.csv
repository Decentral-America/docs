#, Field, JSON field name, Field type, Field size in bytes, Comment
":math:`1`", "Version flag", " ", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Indicates the transaction version is :math:`2` or higher. Value must be :math:`0`."
":math:`2`", ":ref:`Transaction type ID <02_intermediate:Transaction Types>`", "type", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`4`."
":math:`3`", "Transaction version", "version", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`2`."
":math:`4`", "Public key of the transaction sender", "senderPublicKey", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", ":math:`32`", " "
":math:`5.1`", "Transferring token type flag", " ", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value is :math:`0` for transferring DecentralCoins. Value is :math:`1` for transferring other token."
":math:`5.2`", "Transferring token ID", "assetId", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", "S", "math:`S = 0` if the value of the flag 5.1 is :math:`0`. :math:`S = 32` if the value of the flag 5.1 is :math:`1`."
":math:`6.1`", "Fee token type flag", " ", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value is 0 for fee in DecentralCoins. Value is :math:`1` for fee in other token."
":math:`6.2`", "Fee token ID", "feeAssetId", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", "S", "Token to pay the fee. :math:`S = 0` if the value of the flag 6.1 is :math:`0`. :math:`S = 32` if the value of the flag 6.1 field is :math:`1`."
":math:`7`", "Transaction timestamp", "timestamp", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`8`", "Amount of token in the transfer", "amount", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`9`", ":ref:`Transaction fee <02_intermediate:Transaction Fees>`", "fee", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`10`", "Address or alias", "recipient", "See :ref:`address binary format <02_intermediate:Address Binary Format>`, :ref:`alias binary format <02_intermediate:Alias Binary Format>`", "S", "If the first byte of the field is :math:`1`, then it is followed by address. S in this case equals :math:`26`. If the first byte of the field is :math:`2`, then it is followed by alias. In this case :math:`8 <= S <= 34`"
":math:`11.1`", "Attachment length", " ", ":ref:`Short <02_intermediate:Blockchain Data Types>`", ":math:`2`", " "
":math:`11.2`", "Attachment", "attachment", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", "Up to :math:`140` bytes", "Arbitrary data attached to the transaction."
":math:`12`", "Transaction proofs", "proofs", "See :ref:`transaction proofs binary format <02_intermediate:Transaction Proofs Binary Format>`", "S", "If the array is empty, then :math:`S = 3`. If the array is not empty, then :math:`S = 3 + 2 × N + 64 × N`, where N is the number of proofs in the array. The maximum number of proofs in the array is :math:`8`. The size of each proof is :math:`64` bytes."