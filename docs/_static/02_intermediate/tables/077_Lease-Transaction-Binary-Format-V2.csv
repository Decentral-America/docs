#, Field, JSON field name, Field type, Field size in bytes, Comment
":math:`1`", "Version flag", " ", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Indicates the transaction version is :math:`2` or higher. Value must be :math:`0`."
":math:`2`", ":ref:`Transaction type ID <02_intermediate:Transaction Types>`", "type", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`8`."
":math:`3`", "Transaction version", "version", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`2`."
":math:`4`", "Reserved field", " ", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be equal to :math:`0`."
":math:`5`", "Public key of the transaction sender", "senderPublicKey", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", ":math:`32`", " "
":math:`6`", ":ref:`Address <02_intermediate:Address>` or :ref:`alias <02_intermediate:Alias>` of the recipient", "recipient", "See :ref:`address binary format <02_intermediate:Address Binary Format>`, :ref:`alias binary format <02_intermediate:Alias Binary Format>`", "S", "If the first byte of the field is :math:`1`, then it is followed by address. S in this case equals :math:`26`. If the first byte of the field is :math:`2`, then it is followed by alias. In this case :math:`8 <= S <= 34`."
":math:`7`", "Amount of :ref:`DecentralCoins <02_intermediate:DecentralCoin>` that will be leased to the account", "amount", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`8`", ":ref:`Transaction fee <02_intermediate:Transaction Fees>`", "fee", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`9`", "Transaction timestamp", "timestamp", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`10`", "Transaction proofs", "proofs", "See :ref:`transaction proofs binary format <02_intermediate:Transaction Proofs Binary Format>`", "S", "If the array is empty, then :math:`S = 3`. If the array is not empty, then :math:`S = 3 + 2 × N + 64 × N`, where :math:`N` is the number of proofs in the array. The maximum number of proofs in the array is :math:`8`. The size of each proof is :math:`64` bytes."