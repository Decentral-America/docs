#, Field, JSON field name, Field type, Field size in bytes, Comment
":math:`1`", ":ref:`Transaction type ID <02_intermediate:Transaction Types>`", "type", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`11`."
":math:`2`", "Transaction version", "version", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value must be :math:`1`."
":math:`3`", "Public key of the transaction sender", "senderPublicKey", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", ":math:`32`", " "
":math:`4.1`", "Flag DecentralCoins/token", " ", ":ref:`Byte <02_intermediate:Blockchain Data Types>`", ":math:`1`", "Value is :math:`0` for transferring DecentralCoins. Value is :math:`1` for transferring other tokens."
":math:`4.2`", "Token ID", "assetId", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", "S", ":math:`S = 0` if the value of the flag DecentralCoins/token field is :math:`0`. :math:`S = 32` if the value of the flag DecentralCoins/token field is :math:`1`."
":math:`5.1`", "Number of transfers", "transferCount", ":ref:`Short <02_intermediate:Blockchain Data Types>`", ":math:`2` ", " "
":math:`5.2`", ":ref:`Address <02_intermediate:Address>` or :ref:`alias <02_intermediate:Alias>` of the recipient", "recipient", "See :ref:`address binary format <02_intermediate:Address Binary Format>`, :ref:`alias binary format <02_intermediate:Alias Binary Format>`", "S", "If the first byte of the field is :math:`1`, then it is followed by address. S in this case equals :math:`26`. If the first byte of the field is :math:`2`, then it is followed by alias. In this case :math:`8 <= S <= 34`."
":math:`5.3`", "Amount of tokens in the transfer 1", "amount", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`5.4`", "Address or alias of the recipient", "recipient", "See :ref:`address binary format <02_intermediate:Address Binary Format>`, :ref:`alias binary format <02_intermediate:Alias Binary Format>`", "S", "If the first byte of the field is :math:`1`, then it is followed by address. S in this case equals :math:`26`. If the first byte of the field is :math:`2`, then it is followed by alias. In this case :math:`8 <= S <= 34`."
":math:`5.5`", "Amount of tokens in the transfer 2", "amount", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8` ", " "
"...", "...", "...", "...", "...", "..."
":math:`5.[2 × N]`", "Address or alias of the recipient", "recipient", "See :ref:`address binary format <02_intermediate:Address Binary Format>`, :ref:`alias binary format <02_intermediate:Alias Binary Format>`", "S", "If the first byte of the field is :math:`1`, then it is followed by address. S in this case equals :math:`26`. If the first byte of the field is :math:`2`, then it is followed by alias. In this case :math:`8 <= S <= 34`."
":math:`5.[2 × N + 1]`", "Amount of tokens in the transferN", "amount", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`6`", "Transaction timestamp", "timestamp", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8`", " "
":math:`7`", ":ref:`Transaction fee <02_intermediate:Transaction Fees>`", "fee", ":ref:`Long <02_intermediate:Blockchain Data Types>`", ":math:`8` ", " "
":math:`8.1`", "Attachment length", " ", ":ref:`Short <02_intermediate:Blockchain Data Types>`", ":math:`2`", " "
":math:`8.2`", "Attachment", " ", "Array[:ref:`Byte <02_intermediate:Blockchain Data Types>`]", ":math:`2`", "Arbitrary data attached to the transaction."
":math:`9`", "Transaction proofs", "proofs", "See :ref:`transaction proofs binary format <02_intermediate:Transaction Proofs Binary Format>`", "S", "If the array is empty, then :math:`S = 3`. If the array is not empty, then :math:`S = 3 + 2 × N + 64 × N`, where :math:`N` is the number of proofs in the array. The maximum number of proofs in the array is :math:`8`. The size of each proof is :math:`64` bytes."